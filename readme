# Docker 
docker pull alpine:3.10
docker pull ubuntu    # etc

docker image ls

# one way to create a docker image: (u might wanna create a seperate directory)
# get an image from a provider like:  wget https://dl-cdn.alpinelinux.org/alpine/v3.10/releases/x86_64/alpine-minirootfs-3.10.9-x86_64.tar.gz
# with this approach you're able to check the contents of the image before using it - potentially finding security-threats
# create a ./Dockerfile with following content: 
   FROM scratch
   ADD alpine-minirootfs-3.10.9-x86_64.tar.gz /
   COPY os-release /etc    
   CMD ["/bin/sh"]
# and create the aforementioned ./os-release file and following contents
   NAME="Pascal's Alpine Linux Docker-Image"
   ID=alpine
   VERSION_ID=3.10.0-SL
   PRETTY_NAME="https://alpinelinux.org"
   BUG_REPORT_URL="https://bugs.alpine.org"
# create a custom docker image from 3 files above:
   docker build -t pascal/image1:0.1 .
   docker image ls
   
# another way would be:
# Dockerfile:
   FROM alpine:3.10
   COPY os-release /etc
   CMD ["/bin/sh"]
# os-release file same content as above ^^
   docker build -t pascal/image3:0.1 .
   docker image ls
   docker run --rm -it pascal/image3:0.1
   
   
   

   
   
   
   #Installing microk8s
snap install microk8s --channel=latest/edge/strict
   #expected output:
   # microk8s (edge/strict) v1.22.3 from Canonicalâœ“ installed
snap info microk8s   

microk8s status --wait-ready
microk8s enable --help
microk8s enable dashboard dns registry istio

# creating an alias for microk8s kubectsl:
alias mkctl="microk8s kubectl"

# using k8s:
microk8s kubectl get all --all-namespaces

microk8s dashboard-proxy

microk8s start 
microk8s stop  # to save power

   
   
   
   
   
   
   
   
   # all those following steps did'nt produce a working minikube installation on a 1blu vserver
   # installing kvm as prequisite to installing minikube (small k8s)
   sudo apt update
   sudo apt -y install qemu-kvm libvirt-dev bridge-utils libvirt-daemon-system libvirt-daemon virtinst bridge-utils libosinfo-bin libguestfs-tools virt-top
   sudo modprobe vhost_net
   sudo lsmod | grep vhost
   echo "vhost_net" | sudo tee -a /etc/modules
   
   # reinstalling docker
   sudo apt update
   sudo apt remove docker docker-engine docker.io 2>/dev/null
   sudo apt update
   sudo apt -y install lsb-release gnupg apt-transport-https ca-certificates curl software-properties-common
   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/docker.gpg
   sudo add-apt-repository "deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
   sudo apt update
   sudo apt install docker-ce docker-ce-cli containerd.io docker-compose-plugin
   
   # in order for running docker with normal user:
   sudo usermod -aG docker $USER
   newgrp docker
   
   docker version
   docker info
   docker compose version
   
   # download minikube
   wget https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
   chmod +x minikube-linux-amd64
   sudo mv minikube-linux-amd64 /usr/local/bin/minikube
   
   # install kubectl
   curl -LO https://storage.googleapis.com/kubernetes-release/release/`curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
   chmod +x kubectl
   sudo mv kubectl  /usr/local/bin/
   kubectl version -o json 
   
   #install docker Machine KVM driver
   curl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-kvm2
   chmod +x docker-machine-driver-kvm2
   sudo mv docker-machine-driver-kvm2 /usr/local/bin/
   docker-machine-driver-kvm2 version
   
   # starting minikube on KVM
   sudo usermod -aG libvirt $USER
   newgrp libvirt
   minikube config set vm-driver kvm2
   
   # got error tries a reboot
   sudo reboot
   minikube config set vm-driver kvm2
   
